+ - * / ^ - basic 
1 1 2 2 3 - precedence
! %       - additional

functions:
sin( arg ) 
cos( arg )
tan( arg )
cot( arg )
function(arg1, arg2)

//////////////////////////////////////
negative number example:
~number why? '-' it is symbol of  subtraction and ~ is easier to parse
123*-23 -> 123*(~23) -negative number-> ~23
12*-(2+5) -> 12*(~(2+5)) -> ~(2+5) - easier to parse 

liczby ujemne wystepuja w nastepujacych przypadkach:

'~' oznacza liczbe ujemna;

12*-3 -> 12*(~3)
12/-3 -> 12/(~3)
fun-5 -> func(~5)

czyli zawsze za nawiasem otwierajacym;
konieczne jest poprawne umieszczenie nawiasów;

sin23 -> sin(23)
//////////////////////////////////////

//REGEXP PATTERNS:
string number="(((^(\+|-))?[0-9]+(,[0-9]+)?)(E(\+|-)?[0-9]+)?)"; //-scientific notation
string basicAndAdditional="(\+|-|\*|\/|\^)";
string aditional="(!|%)"; //- like number instant rewrite to output;

// Parsing process:
0: input: --2,3E---20*-+4+sin5
1: reduce sings: -2,3E-20*-4+sin5
2: missing parentheses: -2,3E-20*(-4)+sin(5)
3: negative numbers format: ~2,3E-20*(~4)+sin(5)
4: split: ~2,3E-20, *, (, ~4, ), +, sin, (, 5, );
5: translate to postfix: ~2,3E-20, ~4, *, 5, sin, +;
6: Calculate;

